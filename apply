#!/usr/bin/env bash

set -e

# https://stackoverflow.com/a/3232082/7318257
confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Function to show git-style diff
show_diff() {
    PAGER=cat git diff --no-index "$2" "$1" || true
}

# Function to check if files are identical
files_are_identical() {
    if [ -f "$1" ] && [ -f "$2" ]; then
        cmp --silent "$1" "$2"
    else
        false
    fi
}

# Function to create backup
create_backup() {
    local dest_file="$1"
    local filename="$2"
    local backup_dir="backup"

    # Create backup directory if it doesn't exist
    mkdir -p "$backup_dir"

    # Generate timestamp
    local timestamp=$(date +"%Y-%m-%d-%H%M%S")
    local backup_file="$backup_dir/$timestamp-$filename"

    # Copy file to backup
    cp "$dest_file" "$backup_file"
    echo "Created backup: $backup_file"
}

# Function to handle file operations
handle_file() {
    local source_file="$1"
    local dest_file="$2"
    local file_name="$3"
    local needs_reload="$4"

    echo "==================== Processing: $file_name ===================="

    if [ ! -f "$source_file" ]; then
        echo "Source file $source_file does not exist"
        if confirm "Do you want to create $file_name? [y/N]"; then
            cp "$dest_file" "$source_file"
            echo "Created $source_file"
        fi
        return
    fi

    if files_are_identical "$source_file" "$dest_file"; then
        echo 'File is up to date'
        return
    fi

    show_diff "$source_file" "$dest_file"
    if confirm "Apply changes to $file_name? [y/N]"; then
        if [ -f "$dest_file" ]; then
            create_backup "$dest_file" "$file_name"
        fi
        cp "$source_file" "$dest_file"
        echo 'File applied'
        if [ "$needs_reload" = true ]; then
            echo 'Run  reloadrc  to apply changes'
        fi
    fi
}

handle_file "./vimrc" "$HOME/.vimrc" "vimrc" false
handle_file "./sh_aliases" "$HOME/.sh_aliases" "sh_aliases" true
handle_file "./bashrc" "$HOME/.bashrc" "bashrc" true
handle_file "./zshrc" "$HOME/.zshrc" "zshrc" true
